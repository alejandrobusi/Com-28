

console.log group{
agrupa los console.log debajo de el group } 

repaso de arrays {
declaramos un array 
lo comparamos verbalmente , para mostrar que se puede encapsular muchos valores en vez de declarar muchas variables.
console.log del array y explicamos nuevamente la diferencia entre length e index.
mostrar con console.group
console.group("alumnos:")
console.log(alumnos[2]
console.log(alumnos[1]
console.log(alumnos[0]
TRAER EL ULTIMO ALUMNO 
copnsole.log(alumnos[alumnos.length -1])
repetir la explicación
RECORRER ARRAY CON FOR
for (let i = i; array.length; i++) {
console.log(alumnos[i]
}
AÑADIR  ELEMENTO AL ULTIMO DE UN ARRAY{
.push("name")

BORRAR ULTIMO ELELEMENTO {
.pop()
}
AÑADIR UNO O MAS ELEMENTOS AL PRINCIPIO {
.unshift("name","subname")
}
ELIMINA EL INDICE 0 {
.shift()
}
ENCONTRAR INDICE DEL ELEMENTO {
.indexof("name")
} 
ELIMINAR ELEMENTO SEGUN SU POSICION {
let pos = 1;
alumnos.splice(pos,1)
primer parametro = numero desde el que queremos eliminar
segundo parametro = numero de elementos a eliminar
}
CONCATENAR{
alumnos.concat(alumnas)
}
DETERMINAR SI UN VALOR ESTA ENEL ARRAY {
.includes("name")
}
ORDEN ALFABETICO {
.sort()
mostrar ejemplo con numeros
}
PASAR ARRAY A TEXTO {
.join()
}
EXTRAE LA POSICION DEL ARRAY SOBRE EL QUE SE LLAMA Y DEVUELVE UN NUEVO ARRAY{
let alumnosEspeciales = alumnos.slice(1, 3) /pos inicial y pos final
}
El método map() crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.{

var numbers = [1, 5, 10, 15];
var doubles = numbers.map(function(x) {
   return x * 2;
});
// doubles is now [2, 10, 20, 30]
// numbers is still [1, 5, 10, 15]

var numbers = [1, 4, 9];
var roots = numbers.map(function(num) {
    return Math.sqrt(num);
});
// roots is now [1, 2, 3]
// numbers is still [1, 4, 9]
}
El método filter() crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.{
const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]

}
El método find() devuelve el valor del primer elemento del array que cumple la función de prueba proporcionada.{
const array1 = [5, 12, 8, 130, 44];

const found = array1.find(element => element > 10);

console.log(found);
// expected output: 12

}

consultar como se sienten con array

// Number

// Redondear para abajo
console.log(Math.floor(45.89));

//Redondear al numero mas cercano
console.log(Math.round(45.5));
// console.log(Math.round(45.89));
// console.log(Math.round(45.47));

// Obtener el máximo
console.log("El numero maximo es: " + Math.max(45, 17, 0.2, 45.001, 45.02));
// Obtener el minimo
console.log("El numero minimo es: " + Math.min(45, 17, 0.2, 45.001, 45.002));

const base = parseInt("4");
const exponente = 2;
//Elevar a la potencia
console.log(
  `El numero base es ${base} a la potencia ${exponente} es: ` +
    Math.pow(base, exponente)
);

//Numero aleatorio
console.log("El numero aleatorio es: " + Math.round(Math.random() * 1000));

//Obtener la raiz cuadrada
console.log(Math.sqrt(64));

const numero1 = "34.656778";

//Obtener un numero con dos decimales
console.log(Math.round(numero1 * 100) / 100);

const aux = Math.round(numero1 * 100) / 100;
//Obtenemos un numero con 1 decimal con toFixed()
console.log(aux.toFixed(1));

//parseFloat devuelve un numero con punto flotante (coma/decimales)
console.log(parseFloat(numero1).toFixed(4));
//Numer convierte un strin a numero (si tiene coma la mantiene)
console.log(Number(numero1).toFixed(4));




https://docs.google.com/presentation/d/1cYoiEAOQX8tig_rhgxv9SSLogFqUGs25jzmLTHh0Iw0/edit#slide=id.g642b7d2c5b_0_63 ecma 6

https://docs.google.com/document/d/e/2PACX-1vSbuOP6Tfpp_IbAKcqqha76IHLE1TkB_mlZLO61l-MGMFXZFTtqyg0jp_Drt3k0MJMyUi_eHNJdzU18/pub modulo 2 
 

 

